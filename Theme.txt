### お題：自動販売機シミュレーターを作ろう！

私たちの身近にある「自動販売機」を、Pythonの`class`を使って再現してみましょう。
このお題は、複数のクラスがどう連携して一つのシステムを作るのかを理解するのにとても役立ちます。

#### 作りたいもののイメージ

最終的には、コンソール（黒い画面）でこんな風に動くプログラムを目指します。

```
> お金を入れてください: 150
自動販売機にお金が150円入りました。

現在買える飲み物:
1: お茶 (120円)
2: コーラ (150円)
3: 水 (100円)

> 番号を選んでください: 2
コーラを買いました！

> お釣りは0円です。
```

#### ステップ1：モノの設計図を考える

まず、自動販売機に出てくる「モノ」をクラスとして設計します。今回は2つのクラスが必要です。

1.  **飲み物クラス (`Juice`)**
    *   これは一つ一つの飲み物を表現するクラスです。
    *   どんな情報（**属性**）を持つべきでしょうか？（例：名前、値段など）

2.  **自動販売機クラス (`VendingMachine`)**
    *   これは自動販売機本体を表現するクラスです。
    *   どんな情報（**属性**）を持つべきでしょうか？（例：中に入っているお金、商品のリストなど）
    *   どんな行動（**メソッド**）ができるべきでしょうか？（例：お金を入れる、商品を買う、お釣りを出すなど）

**【挑戦1】**
まず、この`Juice`クラスと`VendingMachine`クラスの設計を考えて、それぞれのクラスにどんな属性とメソッドが必要か、紙やテキストエディタに書き出してみてください。

---

#### ステップ2：飲み物クラスを作る

考えた設計図をもとに、まずは簡単な`Juice`クラスから作ってみましょう。

**【挑戦2】**
*   `Juice`という名前のクラスを定義してください。
*   インスタンスが作られるとき(`__init__`)に、**名前(name)**と**値段(price)**を必ず設定するようにしてください。
*   試しに、「お茶、120円」と「コーラ、150円」の2つの`Juice`インスタンスを作ってみてください。

---

#### ステップ3：自動販売機クラスの骨組みを作る

次に、メインとなる`VendingMachine`クラスを作ります。

**【挑戦3】**
*   `VendingMachine`という名前のクラスを定義してください。
*   `VendingMachine`のインスタンスが作られるとき、中にいくつかの`Juice`インスタンスが入っている状態にしたいです。どうすれば実現できるでしょうか？
    *   ヒント：属性として「飲み物のリスト」を持たせ、`__init__`メソッドの中でリストに`Juice`インスタンスを追加してみましょう。
*   また、投入された金額を管理する属性も必要です。初期値は0円で良いでしょう。

---

#### ステップ4：自動販売機に機能（メソッド）を追加する

いよいよ自動販売機を動かしていきます。考えたメソッドを一つずつ実装してみましょう。

**【挑戦4】**
以下の機能を持つメソッドを`VendingMachine`クラスに追加してください。

1.  **お金を投入する (`insert_money`)**
    *   引数で受け取った金額を、投入金額の属性に加算する機能。

2.  **購入可能な商品一覧を表示する (`show_drinks`)**
    *   現在投入されている金額で買える飲み物だけを一覧で表示する機能。
    *   ヒント：持っている飲み物リストをループで回し、投入金額と値段を比較します。

3.  **飲み物を買う (`buy`)**
    *   引数で飲み物の名前（または番号）を受け取ります。
    *   もし買えるなら（お金が足りているか？）、その飲み物の値段を投入金額から引き、「〇〇を買いました！」と表示します。
    *   もし買えないなら（お金が足りない）、その旨を伝えます。

---

#### 発展課題（もし余裕があれば）

*   **在庫管理機能を追加する**
    *   `Juice`クラスに**在庫(stock)**の属性を追加しましょう。
    *   `VendingMachine`の`buy`メソッドを修正し、飲み物を買ったら在庫が1つ減るようにします。在庫が0なら買えないようにしましょう。
*   **お釣り機能を追加する**
    *   買い物が終わった後、残っている投入金額を「お釣り」として表示し、投入金額を0に戻すメソッドを追加してみましょう。
*   **売り上げ管理機能を追加する**
    *   `VendingMachine`に**売り上げ(revenue)**の属性を追加し、商品が売れるたびに加算されるようにしてみましょう。